一、操作符分类：
  算数操作符： + - * /  %
    整数的除法： 1/2 ---> 0
    浮点数的除法：1.0 / 2 ---> 0.5
    %  计算的是整数之后的余数   -   取模操作符的两端必须是整数
  移位操作符：<<   >>     二进制
    << 左移操作符
    >> 右移操作符
    移位操作符，移动的是二进制位（补码）
      整数的二进制表示有3种
        原码、反码、补码
        正的整数的原码、反码、补码相同        
        负的整数的原码、反码、补码是要计算的
        例：7的二进制111
          00000000000000000000000000000111 - 原码、反码、补码
          -7
          10000000000000000000000000000111 - 原码
          11111111111111111111111111111000 - 反码（原码的符号位不变，其他位按位取反就是反码）
          11111111111111111111111111111001 - 补码（反码+1就是补码）
      整数在内存中存储的是补码
      移位操作符移动的是其二进制的补码
      左移操作符：
        左边丢弃，右边补0       7：00000000000000000000000000000111  --->   00000000000000000000000000001110
                               -7：11111111111111111111111111111001   --->   11111111111111111111111111110010    补码
                                                                      --->   11111111111111111111111111110010   反码
                                                                      --->   10000000000000000000000000001110   原码
        左移操作符有乘2的效果
      右移操作符：
        1、算术移位：右边丢弃，左边补原符号位
        2、逻辑移位：右边丢弃，左边补0
        VS编译器采用的是算数右移
  注：
  左右移操作符只能对整数使用
  移位操作符不能移动负数位，标准未定义

int main()
{
    int a = 7;
    //左移操作符
    int b = a << 1;
    printf("a=%d\n", a);    //7
    printf("b=%d\n", b);    //14
}
int main()
{
    int a = -7;
    //左移操作符
    int b = a << 1;
    printf("a=%d\n", a);    //-7
    printf("b=%d\n", b);    //-14
}
int main()
{
    int a = 7;
    //左移操作符
    int b = a >> 1;
    printf("a=%d\n", a);    // 7
    printf("b=%d\n", b);    // 3
}
int main()
{
    int a = -7;
    //左移操作符
    int b = a >> 1;
    printf("a=%d\n", a);    // -7
    printf("b=%d\n", b);    // -4
}
位操作符：& |  ^
  & - 按（2进制）位 与
  a & b : 比较 a 的补码与 b 的补码 按位进行比较，相同则为1，不同则为0
    a = 3    b = -5
    10000000000000000000000000000101
    11111111111111111111111111111010
    11111111111111111111111111111011   -  -5的补码
    00000000000000000000000000000011 - 3的补码
    00000000000000000000000000000011   -  3 & -5
      int main()
      {
          int a = 3;
          int b = -5;
          int c = a & b;
          printf("c = %d\n", c);  //c = 3
          return 0;
      }
  | - 按（2进制）位 或
    a | b : 比较 a 的补码与 b 的补码 按位进行比较，有1则为1，全为0是才为0
    a = 3    b = -5
      11111111111111111111111111111011 -  -5的补码
      00000000000000000000000000000011 - 3的补码
      11111111111111111111111111111011   -  3 | -5
        int main()
        {
            int a = 3;
            int b = -5;
            int c = a | b;
            printf("c = %d\n", c);  //c = -5
            return 0;
        }
  ^ - 按（2进制）位 异或
    a ^ b : 比较 a 的补码与 b 的补码 按位进行比较，相同则为0，不同则为1（与&相反）
      11111111111111111111111111111011 -  -5的补码
      00000000000000000000000000000011 - 3的补码
      11111111111111111111111111111000   -  3 | -5 的补码
      11111111111111111111111111110111
      10000000000000000000000000001000   -  3 | -5 的原码（-8）
        int main()
        {
            int a = 3;
            int b = -5;
            int c = a ^ b;
            printf("c = %d\n", c);  //c = -8
            return 0;
        }
  应用：不创建临时变量（第三个变量），实现两个数的互换
  int main()
  {
      int a = 3;
      int b = 5;
      printf("交换前: a=%d b=%d\n", a, b);
      //方法一
      // a = a + b;
      // b = a - b;
      // a = a - b;
      //方法二
      a = a ^ b;  //a = 3 ^ 5
      b = a ^ b;  //b = 3 ^ 5 ^ 5 = 3
      a = a ^ b;  //a = 3 ^ 5 ^ 3 = 5
      printf("交换后: a=%d b=%d\n", a, b);
      // 3 ^ 3 = 0
      // 0 ^ 5 = 0
      // 3 ^ 3 ^ 5 = 5
      // 3 ^ 5 ^ 3 = 5
      // 异或操作符支持交换律
      return 0;
  }
  计算一个整数存储在内存中的二进制中的1的个数
  #include <stdio.h>
  int main()
  {
      //a为要求的整数
      int a = -3;
      int i = 0;
      int sum = 0;
      for (i = 0; i < 32; i++)
      {
          int s = a & 1;
          if (s == 1)
          {
              sum += 1;
          }
          a = a >> 1;
          
      }
      printf("sum=%d\n", sum);
      return 0;
  }
赋值操作符：=  +=  -= 
单目操作符：
  只有一个操作数 叫做单目操作符
  a + b    此时 + 就为双目操作符，因为有ab两个操作数
  ! - 逻辑反操作符
    int main()
    {
        int flag = 3;
        //flag为真，进入if
        if (flag)
        {}
        //flag为假，进入if
        if (!flag)
        {}
        return 0;
    }
  -   负值    +  正值     （负负得正，但负正不为正）
  & - 取地址操作符
    int main()
    {
        int a = 10;
        printf("%p\n", &a);
        int* p = &a;    //p就是指针变量
        return 0;
    }
  size of   -   操作数的类型长度（以字节为单位）
  ~  -  对一个数的二进制按位取反 
    #include <stdio.h>
    int main()
    {
        int a = 3;
        printf("%d\n", ~a);     //-4
        //~是按二进制进行取反
        //00000000000000000000000000000011
        //11111111111111111111111111111100 - 补码
        //11111111111111111111111111111011
        //10000000000000000000000000000100 - -4
        return 0;
    }
    //将二进制的某一指定的位置进行修改
    //将二进制的某一指定的位置进行修改
      #include <stdio.h>
      int main()
      {
          int a = 13;
          //00000000000000000000000000001101
    //1.将 0 修改为 1 
        //希望将后面的1101 改为1111
        //需要进行的操作是
        //1.将 1 进行左移一位
        //2.将移动后的数与13进行按位或的操作
        a |= (1<<4);
        printf("%d\n", a);      //29
    //2.将 1 修改为 0 
        a &= (~(1<<4));
        printf("%d\n", a);      //13
        return 0;
    }
--   -   前置、后置--
++   -   前置、后置++
  前置++，先++，后使用
  后置++，先使用，后++
  *  -  间接访问操作符（解引用操作符）
(类型)   -  强制类型转换
关系操作符
逻辑操作符
条件操作符
逗号操作符
下标操作符、函数调用和结构成员
